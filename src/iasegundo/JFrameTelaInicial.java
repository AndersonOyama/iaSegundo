/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iasegundo;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.pdmodel.*;
import LeitorPDF.MiVisorPDF;
import LeitorPDF.ArchivosVO;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import static opennlp.bratann.NameFinderAnnService.sentenceDetector;
import opennlp.tools.namefind.BioCodec;
import opennlp.tools.namefind.NameFinderME;
import opennlp.tools.namefind.NameSampleDataStream;
import opennlp.tools.namefind.TokenNameFinder;
import opennlp.tools.namefind.TokenNameFinderFactory;
import opennlp.tools.namefind.TokenNameFinderModel;
import opennlp.tools.tokenize.SimpleTokenizer;
import org.apache.pdfbox.text.PDFTextStripper;
import opennlp.tools.tokenize.Tokenizer;
import opennlp.tools.tokenize.TokenizerME;
import opennlp.tools.tokenize.TokenizerModel;
import opennlp.tools.tokenize.WhitespaceTokenizer;
import opennlp.tools.util.InputStreamFactory;
import opennlp.tools.util.MarkableFileInputStreamFactory;
import opennlp.tools.util.ObjectStream;
import opennlp.tools.util.PlainTextByLineStream;
import opennlp.tools.util.Span;
import opennlp.tools.util.TrainingParameters;

/**
 *
 * @author ander
 */
public class JFrameTelaInicial extends javax.swing.JFrame {

    private String diretorio_arquivo = "";
    public String texto = "";
    private int numImg;
    private ArrayList<ArchivosVO> ListaComponente;
    MiVisorPDF pn = new MiVisorPDF();
    ArchivosVO pl = new ArchivosVO();
    JFileChooser file = new JFileChooser(diretorio_arquivo);

    private int paginas = -1;
    private int totalp = -1;
    int zoom = 0, arquivo_selecionado = 0;

    public JFrameTelaInicial() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSelecionarPasta = new javax.swing.JButton();
        jTextFieldSelecionarPasta = new javax.swing.JTextField();
        jButtonAnalisar = new javax.swing.JButton();
        jLabelNomeArquivo = new javax.swing.JLabel();
        jButtonProx = new javax.swing.JButton();
        jButtonAnt = new javax.swing.JButton();
        jLabelPag = new javax.swing.JLabel();
        Canvas = new LeitorPDF.CuadroImagen();
        jButtonFit = new javax.swing.JButton();
        jButtonZoomIn = new javax.swing.JButton();
        jButtonZoomOut = new javax.swing.JButton();
        jScrollPaneTexto = new javax.swing.JScrollPane();
        jTextPaneTexto = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButtonSelecionarPasta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonSelecionarPasta.setText("Selecionar Arquivo");
        jButtonSelecionarPasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelecionarPastaActionPerformed(evt);
            }
        });

        jTextFieldSelecionarPasta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jButtonAnalisar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonAnalisar.setText("Analisar");
        jButtonAnalisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnalisarActionPerformed(evt);
            }
        });

        jLabelNomeArquivo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabelNomeArquivo.setText("Arquivo não selecionado");
        jLabelNomeArquivo.setAlignmentX(0.5F);
        jLabelNomeArquivo.setMinimumSize(new java.awt.Dimension(5, 5));

        jButtonProx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonProx.setText("Próximo");
        jButtonProx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProxActionPerformed(evt);
            }
        });

        jButtonAnt.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonAnt.setText("Anterior");
        jButtonAnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAntActionPerformed(evt);
            }
        });

        jLabelPag.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabelPag.setText("Pág. ");

        Canvas.setBackground(new java.awt.Color(204, 204, 204));
        Canvas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Canvas.setMaximumSize(new java.awt.Dimension(880, 880));

        javax.swing.GroupLayout CanvasLayout = new javax.swing.GroupLayout(Canvas);
        Canvas.setLayout(CanvasLayout);
        CanvasLayout.setHorizontalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 876, Short.MAX_VALUE)
        );
        CanvasLayout.setVerticalGroup(
            CanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 985, Short.MAX_VALUE)
        );

        jButtonFit.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonFit.setText("Fit");
        jButtonFit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFitActionPerformed(evt);
            }
        });

        jButtonZoomIn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonZoomIn.setText("Zoom In");
        jButtonZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZoomInActionPerformed(evt);
            }
        });

        jButtonZoomOut.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonZoomOut.setText("Zoom Out");
        jButtonZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZoomOutActionPerformed(evt);
            }
        });

        jScrollPaneTexto.setViewportView(jTextPaneTexto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAnt)
                        .addGap(6, 6, 6)
                        .addComponent(jLabelPag)
                        .addGap(33, 33, 33)
                        .addComponent(jButtonProx)
                        .addGap(151, 151, 151)
                        .addComponent(jButtonZoomOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonZoomIn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonFit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldSelecionarPasta, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jLabelNomeArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonSelecionarPasta)
                            .addComponent(jButtonAnalisar)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPaneTexto, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelecionarPasta)
                    .addComponent(jTextFieldSelecionarPasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonProx)
                    .addComponent(jButtonAnt)
                    .addComponent(jLabelPag)
                    .addComponent(jButtonFit)
                    .addComponent(jButtonZoomIn)
                    .addComponent(jButtonZoomOut))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAnalisar)
                    .addComponent(jLabelNomeArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPaneTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelecionarPastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelecionarPastaActionPerformed
        file.setFileFilter(new FileNameExtensionFilter("Arquivos *.pdf", "pdf"));;
        file.setDialogTitle("Selecione o arquivo fonte");
        arquivo_selecionado = file.showOpenDialog(null);
        if (JFileChooser.APPROVE_OPTION == arquivo_selecionado) {
            File selectedFile = file.getSelectedFile();
            if (!selectedFile.getName().endsWith(".pdf")) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione apenas arquivos com extensão PDF!");
                jTextFieldSelecionarPasta.setText("");
                jLabelNomeArquivo.setText("");
            } else {
                File arquivo = file.getSelectedFile();
                jTextFieldSelecionarPasta.setText(file.getSelectedFile().getPath());
                jLabelNomeArquivo.setText(file.getSelectedFile().getName());
                abrir_pdf(arquivo.getPath());
                this.Canvas.disminuir();

            }
        }


    }//GEN-LAST:event_jButtonSelecionarPastaActionPerformed

    private void jButtonAnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnalisarActionPerformed
        PDDocument pdfDocument = null;
        String[] cabecalho;
        try {
            pdfDocument = PDDocument.load(file.getSelectedFile());
            PDFTextStripper stripper = new PDFTextStripper();
            texto = stripper.getText(pdfDocument);
            analisar_texto();

        } catch (IOException e) {
            throw new RuntimeException(e);
        } finally {
            if (pdfDocument != null) {
                try {
                    pdfDocument.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }

    }//GEN-LAST:event_jButtonAnalisarActionPerformed

    private void jButtonAntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAntActionPerformed
        if (file.getSelectedFile().getName().length() != 0) {
            this.numImg -= 1;
            if (paginas == 1) {
                paginas = totalp;
                jLabelPag.setText(String.valueOf("Pág. " + paginas));
            } else {
                paginas = paginas - 1;
                jLabelPag.setText(String.valueOf("Pág. " + paginas));
            }
            //Aplicamos la pagina respectiva para mostrarlo
            if (this.numImg < 0) {
                this.numImg = (this.ListaComponente.size() - 1);
            }
            ArchivosVO pi = new ArchivosVO();
            for (int i = 0; i < ListaComponente.size(); i++) {
                pi = ListaComponente.get(numImg);
                break;
            }
            this.Canvas.setImagen(pi.getArchivos());
            adaptar_vista();

        } else {
            JOptionPane.showMessageDialog(null, "Selecione um arquivo primeiro");
        }
    }//GEN-LAST:event_jButtonAntActionPerformed

    private void jButtonProxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProxActionPerformed
        if (file.getSelectedFile().getName().length() != 0) {
            this.numImg += 1;
            if (paginas == totalp) {
                paginas = 1;
                jLabelPag.setText(String.valueOf("Pág. " + paginas));
            } else {
                paginas = paginas + 1;
                jLabelPag.setText(String.valueOf("Pág. " + paginas));
            }
            if (this.numImg >= this.ListaComponente.size()) {
                this.numImg = 0;
            }
            ArchivosVO pi = new ArchivosVO();
            for (int i = 0; i < ListaComponente.size(); i++) {
                pi = ListaComponente.get(numImg);
                break;
            }
            this.Canvas.setImagen(pi.getArchivos());
            adaptar_vista();
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um arquivo primeiro");
        }
    }//GEN-LAST:event_jButtonProxActionPerformed

    private void jButtonFitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFitActionPerformed
        if (file.getSelectedFile().getName().length() != 0) {
            this.setExtendedState(MAXIMIZED_BOTH);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um arquivo primeiro");
        }
    }//GEN-LAST:event_jButtonFitActionPerformed

    private void jButtonZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZoomOutActionPerformed
        if (file.getSelectedFile().getName().length() != 0) {
            this.Canvas.disminuir();
            zoom = zoom - 1;

        } else {
            JOptionPane.showMessageDialog(null, "Selecione um arquivo primeiro");
        }
    }//GEN-LAST:event_jButtonZoomOutActionPerformed

    private void jButtonZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZoomInActionPerformed
        if (file.getSelectedFile().getName().length() != 0) {
            //Disminuir el zoom
            this.Canvas.aumentar();
            zoom = zoom + 1;

        } else {
            JOptionPane.showMessageDialog(null, "Selecione um arquivo primeiro");
        }
    }//GEN-LAST:event_jButtonZoomInActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameTelaInicial().setVisible(true);
            }
        });
    }

//    public Vector<BufferedImage> Convert(String caminho) {
//        try {
//            Vector<BufferedImage> paginas = new Vector<BufferedImage>();
//            PDDocument document = PDDocument.load(caminho);
//            List<PDPage> pages = document.getDocumentCatalog().getAllPages();
//            for (int i = 0; i < pages.size(); i++) {
//                PDPage singlePage = pages.get(i);
//                BufferedImage buffImage = singlePage.convertToImage();
//                paginas.add(buffImage);
//            }
//            return paginas;
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            return null;
//        }
//    }
    public void abrir_pdf(String url) {
        this.numImg = 0;
        this.ListaComponente = pn.leerPDF(url);
        for (int i = 0; i < ListaComponente.size(); i++) {
            pl = ListaComponente.get(i);;
            this.Canvas.setImagen(pl.getArchivos());
        }
        paginas = 1;
        jLabelPag.setText(String.valueOf("Pág. " + paginas));
        totalp = ListaComponente.size();
        ArchivosVO pi = new ArchivosVO();
        pi = ListaComponente.get(0);
        this.Canvas.setImagen(pi.getArchivos());
    }

    public void adaptar_vista() {
        if (zoom > 0) {
            for (int i = 0; i <= zoom; i++) {
                this.Canvas.aumentar();
            }
        }
        if (zoom < 0) {
            String z = String.valueOf(zoom);
            z = z.replace("-", "");
            int zz = Integer.parseInt(z);
            for (int j = 0; j <= zz; j++) {
                this.Canvas.disminuir();
            }
        }

    }

    public void analisar_texto() {
        String[] cabecalho = texto.split("\\r\\n");
        jTextPaneTexto.setText(texto);
        texto = texto.replace(cabecalho[0], "");  //Remove o cabeçalho da pagina
        //conta_palavra();
        encontra_autor();

    }

    public void conta_palavra() {

        Tokenizer tokenizer = SimpleTokenizer.INSTANCE;
        String tokens[] = tokenizer.tokenize(texto);

        System.out.println("Token\n----------------");
        for (int i = 0; i < tokens.length; i++) {
            System.out.println(tokens[i]);
        }

    }

    public void encontra_autor() {
        InputStreamFactory in = null;
        try {
            in = new MarkableFileInputStreamFactory(new File("D:\\Users\\ander\\Documentos\\NetBeansProjects\\iaSegundo\\ArtigosAnalise\\autores.txt"));
        } catch (FileNotFoundException e2) {
            e2.printStackTrace();
        }

        ObjectStream sampleStream = null;
        try {
            sampleStream = new NameSampleDataStream(
                    new PlainTextByLineStream(in, StandardCharsets.UTF_8));
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        TrainingParameters params = new TrainingParameters();
        params.put(TrainingParameters.ITERATIONS_PARAM, 70);
        params.put(TrainingParameters.CUTOFF_PARAM, 1);

        TokenNameFinderModel nameFinderModel = null;
        try {
            nameFinderModel = NameFinderME.train("en", null, sampleStream,
                    params, TokenNameFinderFactory.create(null, null, Collections.emptyMap(), new BioCodec()));
        } catch (IOException e) {
            e.printStackTrace();
        }

        // saving the model to "ner-custom-model.bin" file
        try {
            File output = new File("D:\\Users\\ander\\Documentos\\NetBeansProjects\\iaSegundo\\ArtigosAnalise\\autores.bin");
            FileOutputStream outputStream = new FileOutputStream(output);
            nameFinderModel.serialize(outputStream);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        TokenNameFinder nameFinder = new NameFinderME(nameFinderModel);

        Tokenizer tokenizer = SimpleTokenizer.INSTANCE;
        String[] testSentence = tokenizer.tokenize(texto);

        System.out.println("Finding types in the test sentence..");
        Span names[] = nameFinder.find(testSentence);
        for (Span name : names) {
            String personName = "";
            for (int i = name.getStart(); i < name.getEnd(); i++) {
                personName += testSentence[i] + " ";
            }
            System.out.println(name.getType() + " : " + personName + "\t [probability=" + name.getProb() + "]");
        }

//        String sentences[] = sentenceDetector.sentDetect(texto);;
//        for (String sentence : sentences) {
//            String tokens[] = tokenizer.tokenize(texto);
//            Span nameSpans[] = nameFinder.find(tokens);
//            // do something with the names
//            System.out.println("Found entity: " + Arrays.toString(Span.spansToStrings(nameSpans, tokens)));
//        }


        System.out.println("Fim da busca");
        try {
            System.out.println("-------Finding entities belonging to category : place name------");
            new JFrameTelaInicial().localizarTitulo();
            System.out.println();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void localizarTitulo() throws IOException {
        InputStream is = new FileInputStream("D:\\Users\\ander\\Documentos\\NetBeansProjects\\iaSegundo\\ArtigosAnalise\\autores.bin");

        // load the model from file
        TokenNameFinderModel model = new TokenNameFinderModel(is);
        is.close();

        // feed the model to name finder class
        NameFinderME nameFinder = new NameFinderME(model);

        // input string array
        Tokenizer tokenizer = SimpleTokenizer.INSTANCE;
        String[] sentence = tokenizer.tokenize(texto);

        Span nameSpans[] = nameFinder.find(sentence);

        // nameSpans contain all the possible entities detected
        for (Span s : nameSpans) {
            System.out.print(s.toString());
            System.out.print("  :  ");
            s.getStart();
            s.getEnd();
            for (int index = s.getStart(); index < s.getEnd(); index++) {
                System.out.print(sentence[index] + " ");
            }
            System.out.println();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private LeitorPDF.CuadroImagen Canvas;
    private javax.swing.JButton jButtonAnalisar;
    private javax.swing.JButton jButtonAnt;
    private javax.swing.JButton jButtonFit;
    private javax.swing.JButton jButtonProx;
    private javax.swing.JButton jButtonSelecionarPasta;
    private javax.swing.JButton jButtonZoomIn;
    private javax.swing.JButton jButtonZoomOut;
    private javax.swing.JLabel jLabelNomeArquivo;
    private javax.swing.JLabel jLabelPag;
    private javax.swing.JScrollPane jScrollPaneTexto;
    private javax.swing.JTextField jTextFieldSelecionarPasta;
    private javax.swing.JTextPane jTextPaneTexto;
    // End of variables declaration//GEN-END:variables
}
